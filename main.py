import telebot
import json
import time
import threading
import asyncio
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
from datetime import datetime
from pytz import timezone

BOT_TOKEN = '7898364358:AAGaivTXDQeXoo4D-1PTok3T2s2ulkLwiwI'
bot = telebot.TeleBot(BOT_TOKEN)

DATA_FILE = 'bot_data.json'
KYIV_TZ = timezone('Europe/Kyiv')  # –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
selected_account = {}
scheduled_pending = {}
delete_pending = {}
text_indices = {}

def init_json():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if not content:
                data = {
                    'accounts': {},
                    'texts': {},
                    'groups': {},
                    'schedules': {},
                    'spam_times': {},
                    'spam_active': {},
                    'admins': [8037144017]  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∞–¥–º—ñ–Ω
                }
                with open(DATA_FILE, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False)
                return data
            return json.loads(content)
    except (FileNotFoundError, json.JSONDecodeError):
        data = {
            'accounts': {},
            'texts': {},
            'groups': {},
            'schedules': {},
            'spam_times': {},
            'spam_active': {},
            'admins': [8037144017]  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∞–¥–º—ñ–Ω
        }
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False)
        return data

class AccountManager:
    def __init__(self):
        self.data = init_json()
        self.clients = {}
        self.auth_pending = {}
        self.loop = asyncio.new_event_loop()
        threading.Thread(target=self.run_loop, daemon=True).start()

    def run_loop(self):
        asyncio.set_event_loop(self.loop)
        self.loop.run_forever()

    def save_data(self):
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False)

    async def start_client(self, account_id, chat_id=None):
        if account_id not in self.data['accounts']:
            return False
        account = self.data['accounts'][account_id]
        client = TelegramClient(f'session_{account_id}', account['api_id'], account['api_hash'])

        await client.connect()
        if not await client.is_user_authorized():
            phone = account.get('phone')
            if phone and chat_id:
                try:
                    await client.send_code_request(phone)
                    self.auth_pending[account_id] = {'client': client, 'chat_id': chat_id, 'step': 'code'}
                    bot.send_message(chat_id, f"üîë –í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó {account_id}. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ:")
                    return False
                except Exception as e:
                    bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó {account_id}: {str(e)}")
                    return False
            return False

        self.clients[account_id] = client
        return True

    async def send_message(self, account_id, text, group=None):
        if account_id not in self.clients or not self.clients[account_id].is_connected():
            await self.start_client(account_id)

        client = self.clients[account_id]
        async with client:
            if group:
                await client.send_message(group, text)
            else:
                dialogs = await client.get_dialogs()
                groups = [d for d in dialogs if d.is_group]
                for g in groups:
                    await client.send_message(g.entity, text)
                    await asyncio.sleep(2)  # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏

manager = AccountManager()

def is_admin(chat_id):
    return chat_id in manager.data['admins']

def handle_auth(message):
    account_id = next((acc for acc in manager.auth_pending if manager.auth_pending[acc]['chat_id'] == message.chat.id), None)
    if not account_id:
        return False

    auth_data = manager.auth_pending[account_id]
    client = auth_data['client']
    chat_id = auth_data['chat_id']

    if auth_data['step'] == 'code':
        try:
            asyncio.run_coroutine_threadsafe(client.sign_in(code=message.text), manager.loop).result()
            password = manager.data['accounts'][account_id].get('password')
            if password:
                try:
                    asyncio.run_coroutine_threadsafe(client.sign_in(password=password), manager.loop).result()
                except SessionPasswordNeededError:
                    auth_data['step'] = 'password'
                    bot.send_message(chat_id, f"üîí –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è {account_id} (2FA):")
                    return True
            auth_data['step'] = 'done'
            bot.send_message(chat_id, f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è {account_id} —É—Å–ø—ñ—à–Ω–∞!")
            manager.clients[account_id] = client
            del manager.auth_pending[account_id]
            manager.save_data()
        except SessionPasswordNeededError:
            auth_data['step'] = 'password'
            bot.send_message(chat_id, f"üîí –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è {account_id} (2FA):")
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É: {str(e)}")
        return True

    elif auth_data['step'] == 'password':
        try:
            asyncio.run_coroutine_threadsafe(client.sign_in(password=message.text), manager.loop).result()
            manager.data['accounts'][account_id]['password'] = message.text
            auth_data['step'] = 'done'
            bot.send_message(chat_id, f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è {account_id} —É—Å–ø—ñ—à–Ω–∞!")
            manager.clients[account_id] = client
            del manager.auth_pending[account_id]
            manager.save_data()
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è: {str(e)}")
        return True

    return False

def authorize_all_accounts():
    for account_id in manager.data['accounts']:
        if account_id not in manager.clients:
            asyncio.run_coroutine_threadsafe(manager.start_client(account_id, manager.data['admins'][0]), manager.loop).result()

def main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏')
    markup.add('üìù –¢–µ–∫—Å—Ç–∏')
    return markup

def account_menu(account_id):
    spam_status = "‚úÖ –í–∫–ª" if manager.data['spam_active'].get(account_id, False) else "‚ùå –í–∏–∫–ª"
    groups_mode = "üåê –í—Å—ñ" if not manager.data['groups'].get(account_id) else "üéØ –û–∫—Ä–µ–º—ñ"
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(f'–ê–≤—Ç–æ-—Å–ø–∞–º: {spam_status}')
    markup.add('–î–æ–¥–∞—Ç–∏ —á–∞—Å –¥–ª—è —Å–ø–∞–º—É', '–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å –¥–ª—è –∞–≤—Ç–æ-—Å–ø–∞–º—É')
    markup.add(f'–ì—Ä—É–ø–∏: {groups_mode}', '–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º –≥—Ä—É–ø')
    markup.add('–î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø–∏', '–í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø–∏')
    markup.add('‚è∞ –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É')
    markup.add('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    return markup

def run_scheduled_message(account_id, text):
    if not manager.data['spam_active'].get(account_id, False):
        return
    groups = manager.data['groups'].get(account_id, [])
    if groups:
        for group_id in groups:
            asyncio.run_coroutine_threadsafe(manager.send_message(account_id, text, group_id), manager.loop).result()
    else:
        asyncio.run_coroutine_threadsafe(manager.send_message(account_id, text), manager.loop).result()

def spam_loop():
    global text_indices
    while True:
        now = datetime.now(KYIV_TZ)
        current_time_str = now.strftime('%H:%M')

        for account_id in manager.data['accounts']:
            if not manager.data['spam_active'].get(account_id, False):
                continue
            spam_times = manager.data['spam_times'].get(account_id, [])
            if current_time_str in spam_times:
                texts = manager.data['texts'].get(account_id, [])
                if texts:
                    text_index = text_indices.get(account_id, 0) % len(texts)
                    text = texts[text_index]
                    run_scheduled_message(account_id, text)
                    text_indices[account_id] = text_index + 1

            if account_id in manager.data['schedules'] and 'time' in manager.data['schedules'][account_id]:
                sched = manager.data['schedules'][account_id]
                sched_time = datetime.strptime(sched['time'], '%d.%m.%Y %H:%M').astimezone(KYIV_TZ)
                if now >= sched_time:
                    texts = manager.data['texts'].get(account_id, [])
                    if texts and sched['text'] in texts:
                        run_scheduled_message(account_id, sched['text'])
                    del manager.data['schedules'][account_id]['time']
                    manager.save_data()

        time.sleep(60)

@bot.message_handler(commands=['start'])
def start(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞!")
        return
    bot.send_message(message.chat.id, "üëã –í—ñ—Ç–∞—é –≤ –∞–¥–º—ñ–Ω-–±–æ—Ç—ñ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

@bot.message_handler(commands=['add_admin'])
def add_admin(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏ —ñ–Ω—à–∏—Ö –∞–¥–º—ñ–Ω—ñ–≤!")
        return
    try:
        new_admin_id = int(message.text.split()[1])
        if new_admin_id not in manager.data['admins']:
            manager.data['admins'].append(new_admin_id)
            manager.save_data()
            bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º—ñ–Ω {new_admin_id} –¥–æ–¥–∞–Ω–æ!")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {new_admin_id} —É–∂–µ —î –∞–¥–º—ñ–Ω–æ–º!")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å ID –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /add_admin 123456789")

@bot.message_handler(commands=['remove_admin'])
def remove_admin(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –≤–∏–¥–∞–ª—è—Ç–∏ —ñ–Ω—à–∏—Ö –∞–¥–º—ñ–Ω—ñ–≤!")
        return
    try:
        admin_id = int(message.text.split()[1])
        if admin_id in manager.data['admins']:
            if len(manager.data['admins']) <= 1:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–¥–º—ñ–Ω–∞!")
            elif admin_id == message.chat.id:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ–±–µ!")
            else:
                manager.data['admins'].remove(admin_id)
                manager.save_data()
                bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º—ñ–Ω {admin_id} –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {admin_id} –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º!")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å ID –∞–¥–º—ñ–Ω–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /remove_admin 123456789")

@bot.message_handler(commands=['list_admins'])
def list_admins(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤!")
        return
    admins = "\n".join(str(admin_id) for admin_id in manager.data['admins'])
    bot.send_message(message.chat.id, f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤:\n{admins}")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞!")
        return

    if handle_auth(message):
        return

    chat_id = message.chat.id
    text = message.text

    if chat_id in scheduled_pending:
        account_id = scheduled_pending[chat_id]['account_id']
        time_str = scheduled_pending[chat_id]['time_str']
        try:
            text_num = int(text) - 1
            texts = manager.data['texts'].get(account_id, [])
            if not (0 <= text_num < len(texts)):
                raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–∫—Å—Ç—É –ø–æ–∑–∞ –º–µ–∂–∞–º–∏!")
            manager.data['schedules'][account_id] = {'time': time_str, 'text': texts[text_num]}
            manager.save_data()
            bot.send_message(chat_id, f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–ª—è {account_id} –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –Ω–∞ {time_str}!",
                             reply_markup=account_menu(account_id))
            del scheduled_pending[chat_id]
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç—É!",
                             reply_markup=account_menu(account_id))
        return

    if chat_id in delete_pending:
        account_id = delete_pending[chat_id]['account_id']
        step = delete_pending[chat_id]['step']

        if step == 'select':
            try:
                time_num = int(text) - 1
                spam_times = manager.data['spam_times'].get(account_id, [])
                if not (0 <= time_num < len(spam_times)):
                    raise ValueError("–ù–æ–º–µ—Ä —á–∞—Å—É –ø–æ–∑–∞ –º–µ–∂–∞–º–∏!")
                delete_pending[chat_id] = {'account_id': account_id, 'step': 'confirm',
                                           'time_to_delete': spam_times[time_num]}
                bot.send_message(chat_id,
                                 f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å {spam_times[time_num]} –¥–ª—è {account_id}? (–¢–∞–∫/–ù—ñ)")
            except Exception as e:
                bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä!",
                                 reply_markup=account_menu(account_id))
                del delete_pending[chat_id]
        elif step == 'confirm':
            if text.lower() == '—Ç–∞–∫':
                spam_times = manager.data['spam_times'][account_id]
                time_to_delete = delete_pending[chat_id]['time_to_delete']
                spam_times.remove(time_to_delete)
                if not spam_times:
                    del manager.data['spam_times'][account_id]
                manager.save_data()
                bot.send_message(chat_id, f"‚úÖ –ß–∞—Å {time_to_delete} –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è {account_id}!",
                                 reply_markup=account_menu(account_id))
            else:
                bot.send_message(chat_id, f"‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ!", reply_markup=account_menu(account_id))
            del delete_pending[chat_id]
        return

    if text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        total = len(manager.data['accounts'])
        active_spam = sum(1 for acc in manager.data['spam_active'] if manager.data['spam_active'][acc])
        bot.send_message(chat_id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ê–∫–∞—É–Ω—Ç—ñ–≤: {total}\n–ó –∞–≤—Ç–æ-—Å–ø–∞–º–æ–º: {active_spam}",
                         reply_markup=main_menu())

    elif text == '‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏':
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i, acc in enumerate(manager.data['accounts'].keys(), 1):
            markup.add(f'üë§ –ê–∫–∞—É–Ω—Ç {i} ({acc})')
        markup.add('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç:", reply_markup=markup)

    elif text.startswith('üë§ –ê–∫–∞—É–Ω—Ç'):
        try:
            acc_num = int(text.split()[2].split('(')[0]) - 1
            account_id = list(manager.data['accounts'].keys())[acc_num]
            if account_id in manager.clients:
                selected_account[chat_id] = account_id
                bot.send_message(chat_id, f"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è {account_id}", reply_markup=account_menu(account_id))
            else:
                bot.send_message(chat_id,
                                 f"‚ö†Ô∏è –ê–∫–∞—É–Ω—Ç {account_id} —â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π. –ó–∞—á–µ–∫–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.")
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É: {str(e)}", reply_markup=main_menu())

    elif text.startswith('–ê–≤—Ç–æ-—Å–ø–∞–º:'):
        account_id = selected_account.get(chat_id)
        if account_id and account_id in manager.clients:
            manager.data['spam_active'][account_id] = not manager.data['spam_active'].get(account_id, False)
            status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if manager.data['spam_active'][account_id] else "–≤–∏–º–∫–Ω–µ–Ω–æ"
            bot.send_message(chat_id, f"‚úÖ –ê–≤—Ç–æ-—Å–ø–∞–º –¥–ª—è {account_id} {status}!", reply_markup=account_menu(account_id))
            manager.save_data()
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç —Å–ø–æ—á–∞—Ç–∫—É!", reply_markup=main_menu())

    elif text == '–î–æ–¥–∞—Ç–∏ —á–∞—Å –¥–ª—è —Å–ø–∞–º—É':
        account_id = selected_account.get(chat_id)
        if account_id and account_id in manager.clients:
            bot.send_message(chat_id, f"‚è∞ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –¥–ª—è –∞–≤—Ç–æ-—Å–ø–∞–º—É {account_id} —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 06:30):")
            bot.register_next_step_handler(message, process_add_spam_time, account_id)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç —Å–ø–æ—á–∞—Ç–∫—É!", reply_markup=main_menu())

    elif text == '–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å –¥–ª—è –∞–≤—Ç–æ-—Å–ø–∞–º—É':
        account_id = selected_account.get(chat_id)
        if account_id and account_id in manager.clients:
            spam_times = manager.data['spam_times'].get(account_id, [])
            if not spam_times:
                bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ–º–∞—î —á–∞—Å—É –¥–ª—è –∞–≤—Ç–æ-—Å–ø–∞–º—É –¥–ª—è {account_id}!",
                                 reply_markup=account_menu(account_id))
            else:
                times_list = "\n".join(f"{i + 1}. {t}" for i, t in enumerate(spam_times))
                bot.send_message(chat_id, f"‚è∞ –í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —á–∞—Å—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ {account_id}:\n{times_list}")
                delete_pending[chat_id] = {'account_id': account_id, 'step': 'select'}
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç —Å–ø–æ—á–∞—Ç–∫—É!", reply_markup=main_menu())

    elif text == '–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º –≥—Ä—É–ø':
        account_id = selected_account.get(chat_id)
        if account_id and account_id in manager.clients:
            if manager.data['groups'].get(account_id):
                del manager.data['groups'][account_id]
                manager.save_data()
                bot.send_message(chat_id, f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ '–í—Å—ñ –≥—Ä—É–ø–∏' –¥–ª—è {account_id}",
                                 reply_markup=account_menu(account_id))
            else:
                bot.send_message(chat_id,
                                 f"üìã –í–≤–µ–¥—ñ—Ç—å ID –≥—Ä—É–ø –¥–ª—è {account_id} —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, -100123456789, -100987654321):")
                bot.register_next_step_handler(message, process_groups, account_id)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç —Å–ø–æ—á–∞—Ç–∫—É!", reply_markup=main_menu())

    elif text == '–î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø–∏':
        account_id = selected_account.get(chat_id)
        if account_id and account_id in manager.clients:
            bot.send_message(chat_id,
                             f"üìã –í–≤–µ–¥—ñ—Ç—å ID –≥—Ä—É–ø –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ {account_id} —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, -100123456789, -100987654321):")
            bot.register_next_step_handler(message, process_add_groups, account_id)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç —Å–ø–æ—á–∞—Ç–∫—É!", reply_markup=main_menu())

    elif text == '–í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø–∏':
        account_id = selected_account.get(chat_id)
        if account_id and account_id in manager.clients:
            if manager.data['groups'].get(account_id):
                bot.send_message(chat_id,
                                 f"üìã –í–≤–µ–¥—ñ—Ç—å ID –≥—Ä—É–ø –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ {account_id} —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, -100123456789, -100987654321):")
                bot.register_next_step_handler(message, process_remove_groups, account_id)
            else:
                bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ–º–∞—î –æ–∫—Ä–µ–º–∏—Ö –≥—Ä—É–ø –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!",
                                 reply_markup=account_menu(account_id))
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç —Å–ø–æ—á–∞—Ç–∫—É!", reply_markup=main_menu())

    elif text == '‚è∞ –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É':
        account_id = selected_account.get(chat_id)
        if account_id and account_id in manager.clients:
            texts = manager.data['texts'].get(account_id, [])
            if not texts:
                bot.send_message(chat_id, f"‚ö†Ô∏è –î–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–∏ –¥–ª—è {account_id} —Å–ø–æ—á–∞—Ç–∫—É!",
                                 reply_markup=account_menu(account_id))
            else:
                bot.send_message(chat_id, f"‚è∞ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –¥–ª—è {account_id} —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•:")
                bot.send_message(chat_id, f"–¢–µ–∫—Å—Ç–∏:\n" + "\n".join(f"{i + 1}. {t}" for i, t in enumerate(texts)))
                bot.register_next_step_handler(message, process_schedule_step1, account_id)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç —Å–ø–æ—á–∞—Ç–∫—É!", reply_markup=main_menu())

    elif text == 'üìù –¢–µ–∫—Å—Ç–∏':
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i, acc in enumerate(manager.data['accounts'].keys(), 1):
            markup.add(f'‚úçÔ∏è –¢–µ–∫—Å—Ç–∏ –¥–ª—è {acc}')
        markup.add('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤:", reply_markup=markup)

    elif text.startswith('‚úçÔ∏è –¢–µ–∫—Å—Ç–∏ –¥–ª—è'):
        account_id = text.split('‚úçÔ∏è –¢–µ–∫—Å—Ç–∏ –¥–ª—è ')[1]
        if account_id in manager.data['accounts']:
            bot.send_message(chat_id, f"üìù –í–≤–µ–¥—ñ—Ç—å –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç –¥–ª—è {account_id}:")
            bot.register_next_step_handler(message, process_add_text, account_id)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ê–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", reply_markup=main_menu())

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if chat_id in selected_account:
            del selected_account[chat_id]
        bot.send_message(chat_id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())

def process_add_spam_time(message, account_id):
    try:
        time_str = message.text.strip()
        datetime.strptime(time_str, '%H:%M')
        spam_times = manager.data['spam_times'].get(account_id, [])
        if time_str not in spam_times:
            spam_times.append(time_str)
            manager.data['spam_times'][account_id] = sorted(spam_times)
            manager.save_data()
            bot.send_message(message.chat.id, f"‚úÖ –ß–∞—Å {time_str} –¥–æ–¥–∞–Ω–æ –¥–ª—è –∞–≤—Ç–æ-—Å–ø–∞–º—É {account_id}!",
                             reply_markup=account_menu(account_id))
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ß–∞—Å {time_str} —É–∂–µ —î –¥–ª—è {account_id}!",
                             reply_markup=account_menu(account_id))
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É: {str(e)}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ì–ì:–•–•",
                         reply_markup=account_menu(account_id))

def process_groups(message, account_id):
    try:
        group_ids = [int(gid.strip()) for gid in message.text.split(',')]
        manager.data['groups'][account_id] = group_ids
        manager.save_data()
        bot.send_message(message.chat.id, f"‚úÖ –ì—Ä—É–ø–∏ –¥–ª—è {account_id} –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!",
                         reply_markup=account_menu(account_id))
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}", reply_markup=account_menu(account_id))

def process_add_groups(message, account_id):
    try:
        group_ids = [int(gid.strip()) for gid in message.text.split(',')]
        current_groups = manager.data['groups'].get(account_id, [])
        manager.data['groups'][account_id] = list(set(current_groups + group_ids))
        manager.save_data()
        bot.send_message(message.chat.id, f"‚úÖ –ì—Ä—É–ø–∏ –¥–æ–¥–∞–Ω–æ –¥–æ {account_id}!", reply_markup=account_menu(account_id))
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}", reply_markup=account_menu(account_id))

def process_remove_groups(message, account_id):
    try:
        group_ids = [int(gid.strip()) for gid in message.text.split(',')]
        current_groups = manager.data['groups'].get(account_id, [])
        manager.data['groups'][account_id] = [gid for gid in current_groups if gid not in group_ids]
        if not manager.data['groups'][account_id]:
            del manager.data['groups'][account_id]
        manager.save_data()
        bot.send_message(message.chat.id, f"‚úÖ –ì—Ä—É–ø–∏ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ {account_id}!", reply_markup=account_menu(account_id))
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}", reply_markup=account_menu(account_id))

def process_schedule_step1(message, account_id):
    try:
        time_str = message.text.strip()
        datetime.strptime(time_str, '%d.%m.%Y %H:%M')
        scheduled_pending[message.chat.id] = {'account_id': account_id, 'time_str': time_str}
        bot.send_message(message.chat.id, "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç—É –∑ –±–∞–∑–∏:")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É: {str(e)}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•",
                         reply_markup=account_menu(account_id))

def process_add_text(message, account_id):
    try:
        new_text = message.text.strip()
        if not new_text:
            raise ValueError("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!")
        texts = manager.data['texts'].get(account_id, [])
        texts.append(new_text)
        manager.data['texts'][account_id] = texts
        manager.save_data()
        text_number = len(texts)
        bot.send_message(message.chat.id,
                         f"‚úÖ –í–∞—à —Ç–µ–∫—Å—Ç –≤–∏–≥–ª—è–¥–∞—î –æ—Å—å —Ç–∞–∫: '{new_text}'. –î–æ–¥–∞–Ω–æ –∑ –Ω–æ–º–µ—Ä–æ–º {text_number}!",
                         reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}", reply_markup=main_menu())

if __name__ == '__main__':
    threading.Thread(target=authorize_all_accounts, daemon=True).start()
    threading.Thread(target=spam_loop, daemon=True).start()
    bot.polling(none_stop=True)
